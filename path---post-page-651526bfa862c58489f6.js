webpackJsonp([0x802fbec6f909],{252:function(e,n){e.exports={data:{site:{siteMetadata:{title:"David's Site",description:"A site about me, David Wu."}},allMarkdownRemark:{totalCount:3,edges:[{node:{id:"/Users/davidwu/Desktop/Projects/mySite-gatsby/src/blog/test.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Location Select Page with Google Maps and Ionic",date:"25 January, 2018"},html:"<p>If you want to accept a user supplied location in your application, and you want it to be in any kind of remotely useful format, it could be quite hard to do. You could of course just have a simple text field and allow the user to type the address, but that’s a lot of work for the user and would lead to very inconsistent data – you could type the same address in many different ways.</p>\n<p>If you wanted to display that address on a map, it would be difficult to do by going off of a user supplied address. It would be much easier if you had the latitude and longitude of that address, but I suspect there are very few people on the planet that know that Uluru is at -25.344428, 131.036882 off the top of their head.</p>\n<p>The Google Places API can do a great deal to help us solve this problem. It gives us the best of both worlds in that we can allow users to input an address easily, but we can also store the location in a more developer friendly format.</p>\n<p>In this tutorial, we are going to walk through how to build a location selection page in Ionic using the Google Places API. The user will be able to start typing an address and as they do the Google Places API will suggest a list of possible places. Upon selecting a particular place, we will set that place on a Google Map, and we will also be given the latitude, longitude, and name for the place that was selected.</p>\n<p>Once we are finished, it will look something like this:</p>\n<p>Location Select in Ionic</p>\n<p>Before We Get Started</p>\n<p>Last updated for Ionic 3.1.0</p>\n<p>Before you go through this tutorial, you should have at least a basic understanding of Ionic concepts. You must also already have Ionic set up on your machine.</p>\n<p>If you’re not familiar with Ionic already, I’d recommend reading my Ionic Beginners Guide or watching my beginners series first to get up and running and understand the basic concepts. If you want a much more detailed guide for learning Ionic, then take a look at Building Mobile Apps with Ionic.</p>\n<p>Learn Ionic\nSubscribe to my mailing list to get a free 7 day Ionic email course and instant access to all of the bonus content for the site.</p>\n<ol>\n<li>Generate a New Ionic Application</li>\n</ol>\n<p>To begin, we are going to generate a new Ionic application with the following command:</p>\n<p>ionic start ionic-location-select blank</p>\n<p>Once that has finished generating, you should make it your working directory by running the following command:</p>\n<p>We are going to create our LocationSelect page as an independent modal that can be popped up in your application wherever you require it. When the modal is dismissed it will pass back the location information to whatever page called it.</p>\n<p>Run the following command to generate the LocationSelect page:</p>\n<p>ionic g page LocationSelect</p>\n<p>We are also going to create a couple of providers to help us with the functionality for this application, so let’s create those as well:</p>\n<p>Run the following command to generate the required providers:</p>\n<p>ionic g provider ConnectivityService</p>\n<p>ionic g provider GoogleMaps</p>\n<p>We will implement these in just a moment. We are also going to need to install a couple of Cordova plugins, and we will be using the Ionic Native packages to help use those.</p>\n<p>Run the following commands to install the Network and Geolocation plugins:</p>\n<p>ionic plugin add --save cordova-plugin-geolocation</p>\n<p>npm install --save @ionic-native/geolocation</p>\n<p>ionic plugin add --save cordova-plugin-network-information</p>\n<p>npm install --save @ionic-native/network</p>\n<p>In order for the Google Maps functionality to work well with TypeScript, you will need to run the following command:</p>\n<p>npm install @types/google-maps --save</p>\n<p>If you do not install the types for Google Maps, you will get errors that complain about not knowing what google is. Finally, we are going to need to set up these providers and plugins in our app.module.ts file.</p>\n<p>Modify src/app/app.module.ts to reflect the following:</p>\n<p>import { BrowserModule } from '@angular/platform-browser';</p>\n<p>import { ErrorHandler, NgModule } from '@angular/core';</p>\n<p>import { IonicApp, IonicErrorHandler, IonicModule } from 'ionic-angular';</p>\n<p>import { SplashScreen } from '@ionic-native/splash-screen';</p>\n<p>import { StatusBar } from '@ionic-native/status-bar';</p>\n<p>import { MyApp } from './app.component';</p>\n<p>import { HomePage } from '../pages/home/home';</p>\n<p>import { LocationSelect } from '../pages/location-select/location-select';</p>\n<p>import { Connectivity } from '../providers/connectivity-service';</p>\n<p>import { GoogleMaps } from '../providers/google-maps';</p>\n<p>import { Network } from '@ionic-native/network';</p>\n<p>import { Geolocation } from '@ionic-native/geolocation';</p>\n<p>@NgModule({</p>\n<p>  declarations: [</p>\n<pre><code>MyApp,\n\nHomePage,\n\nLocationSelect\n</code></pre>\n<p>  ],</p>\n<p>  imports: [</p>\n<pre><code>BrowserModule,\n\nIonicModule.forRoot(MyApp)\n</code></pre>\n<p>  ],</p>\n<p>  bootstrap: [IonicApp],</p>\n<p>  entryComponents: [</p>\n<pre><code>MyApp,\n\nHomePage,\n\nLocationSelect\n</code></pre>\n<p>  ],</p>\n<p>  providers: [</p>\n<pre><code>StatusBar,\n\nSplashScreen,\n\nConnectivity,\n\nGoogleMaps,\n\nNetwork,\n\nGeolocation,\n\n{provide: ErrorHandler, useClass: IonicErrorHandler}\n</code></pre>\n<p>  ]</p>\n<p>})</p>\n<p>export class AppModule {}</p>\n<ol start=\"2\">\n<li>Implement the Dependencies</li>\n</ol>\n<p>There’s quite a bit of setup required for this tutorial that is related to Google Maps, but it is all stuff I have covered previously. We will be loading in Google Maps dynamically so that in the case that the user is not currently online when launching the application, or that they go offline when using the application, the app will continue to function as expected.</p>\n<p>If you would like to read in more detail about exactly what is happening with the following steps I would recommend reading Creating an Advanced Google Map Component in Ionic. We will mostly just be copying and pasting for these initial steps.</p>\n<p>Modify src/providers/connectivity-service.ts to reflect the following:</p>\n<p>import { Injectable } from '@angular/core';</p>\n<p>import { Network } from '@ionic-native/network';</p>\n<p>import { Platform } from 'ionic-angular';</p>\n<p>import { Observable } from 'rxjs/Observable';</p>\n<p>declare var Connection;</p>\n<p>@Injectable()</p>\n<p>export class Connectivity {</p>\n<p>  onDevice: boolean;</p>\n<p>  constructor(public platform: Platform, public network: Network){</p>\n<pre><code>this.onDevice = this.platform.is('cordova');\n</code></pre>\n<p>  }</p>\n<p>  isOnline(): boolean {</p>\n<pre><code>if(this.onDevice &#x26;&#x26; this.network.type){\n\n  return this.network.type != 'none';\n\n} else {\n\n  return navigator.onLine;\n\n}\n</code></pre>\n<p>  }</p>\n<p>  isOffline(): boolean {</p>\n<pre><code>if(this.onDevice &#x26;&#x26; this.network.type){\n\n  return this.network.type == 'none';\n\n} else {\n\n  return !navigator.onLine;  \n\n}\n</code></pre>\n<p>  }</p>\n<p>  watchOnline(): any {</p>\n<pre><code>return this.network.onConnect();\n</code></pre>\n<p>  }</p>\n<p>  watchOffline(): any {</p>\n<pre><code>return this.network.onDisconnect();\n</code></pre>\n<p>  }</p>\n<p>}</p>\n<p>Modify src/providers/google-maps.ts to reflect the following:</p>\n<p>import { Injectable } from '@angular/core';</p>\n<p>import { Platform } from 'ionic-angular';</p>\n<p>import { Connectivity } from './connectivity-service';</p>\n<p>import { Geolocation } from '@ionic-native/geolocation';</p>\n<p>@Injectable()</p>\n<p>export class GoogleMaps {</p>\n<p>  mapElement: any;</p>\n<p>  pleaseConnect: any;</p>\n<p>  map: any;</p>\n<p>  mapInitialised: boolean = false;</p>\n<p>  mapLoaded: any;</p>\n<p>  mapLoadedObserver: any;</p>\n<p>  currentMarker: any;</p>\n<p>  apiKey: string = \"YOUR<em>API</em>KEY\";</p>\n<p>  constructor(public connectivityService: Connectivity, public geolocation: Geolocation) {</p>\n<p>  }</p>\n<p>  init(mapElement: any, pleaseConnect: any): Promise<any> {</p>\n<pre><code>this.mapElement = mapElement;\n\nthis.pleaseConnect = pleaseConnect;\n\nreturn this.loadGoogleMaps();\n</code></pre>\n<p>  }</p>\n<p>  loadGoogleMaps(): Promise<any> {</p>\n<pre><code>return new Promise((resolve) => {\n\n  if(typeof google == \"undefined\" || typeof google.maps == \"undefined\"){\n\n    console.log(\"Google maps JavaScript needs to be loaded.\");\n\n    this.disableMap();\n\n    if(this.connectivityService.isOnline()){\n\n      window['mapInit'] = () => {\n\n        this.initMap().then(() => {\n\n          resolve(true);\n\n        });\n\n        this.enableMap();\n\n      }\n\n      let script = document.createElement(\"script\");\n\n      script.id = \"googleMaps\";\n\n      if(this.apiKey){\n\n        script.src = 'http://maps.google.com/maps/api/js?key=' + this.apiKey + '&#x26;callback=mapInit&#x26;libraries=places';\n      } else {\n\n        script.src = 'http://maps.google.com/maps/api/js?callback=mapInit';      \n      }\n\n      document.body.appendChild(script); \n\n    }\n\n  } else {\n\n    if(this.connectivityService.isOnline()){\n\n      this.initMap();\n\n      this.enableMap();\n\n    }\n\n    else {\n\n      this.disableMap();\n\n    }\n\n    resolve(true);\n\n  }\n\n  this.addConnectivityListeners();\n\n});\n</code></pre>\n<p>  }</p>\n<p>  initMap(): Promise<any> {</p>\n<pre><code>this.mapInitialised = true;\n\nreturn new Promise((resolve) => {\n\n  this.geolocation.getCurrentPosition().then((position) => {\n\n    let latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\n\n    let mapOptions = {\n\n      center: latLng,\n\n      zoom: 15,\n\n      mapTypeId: google.maps.MapTypeId.ROADMAP\n\n    }\n\n    this.map = new google.maps.Map(this.mapElement, mapOptions);\n\n    resolve(true);\n\n  });\n\n});\n</code></pre>\n<p>  }</p>\n<p>  disableMap(): void {</p>\n<pre><code>if(this.pleaseConnect){\n\n  this.pleaseConnect.style.display = \"block\";\n\n}\n</code></pre>\n<p>  }</p>\n<p>  enableMap(): void {</p>\n<pre><code>if(this.pleaseConnect){\n\n  this.pleaseConnect.style.display = \"none\";\n\n}\n</code></pre>\n<p>  }</p>\n<p>  addConnectivityListeners(): void {</p>\n<pre><code>this.connectivityService.watchOnline().subscribe(() => {\n\n  setTimeout(() => {\n\n    if(typeof google == \"undefined\" || typeof google.maps == \"undefined\"){\n\n      this.loadGoogleMaps();\n\n    }\n\n    else {\n\n      if(!this.mapInitialised){\n\n        this.initMap();\n\n      }\n\n      this.enableMap();\n\n    }\n\n  }, 2000);\n\n});\n\nthis.connectivityService.watchOffline().subscribe(() => {\n\n  this.disableMap();\n\n});\n</code></pre>\n<p>  }</p>\n<p>}</p>\n<p>IMPORTANT: In order for Google Maps to work, you will need to overwrite:</p>\n<p>apiKey: string = \"YOUR<em>API</em>KEY\";</p>\n<p>with your own API key. If you do not have one or do not know how to create one, you should read this.</p>\n<p>Although the code above is mostly unchanged from the tutorial I link, there is one important change and that is:</p>\n<p>script.src = '<a href=\"http://maps.google.com/maps/api/js?key=\">http://maps.google.com/maps/api/js?key=</a>' + this.apiKey + '&#x26;callback=mapInit&#x26;libraries=places';\nNotice that at the end of this URL we include &#x26;libraries=places, this will include the Google Places API on top of the normal Google Maps API.</p>\n<ol start=\"3\">\n<li>Implement the Location Select Page</li>\n</ol>\n<p>Now that we have our dependencies set up, we can move on to creating the LocationSelect page itself. We will start off by implementing the template because I think it will help give context to the functionality we will add in the TypeScript file.</p>\n<p>Modify src/pages/location-select/location-select.html to reflect the following:</p>\n<ion-header>\n<pre><code>&#x3C;ion-navbar color=\"primary\">\n\n    &#x3C;ion-buttons left>\n\n        &#x3C;button ion-button (click)=\"close()\">Cancel&#x3C;/button>\n\n    &#x3C;/ion-buttons>\n\n    &#x3C;ion-buttons right>\n\n        &#x3C;button [disabled]=\"saveDisabled\" ion-button (click)=\"save()\">Save&#x3C;/button>\n\n    &#x3C;/ion-buttons>\n\n&#x3C;/ion-navbar>\n\n&#x3C;ion-toolbar>\n\n    &#x3C;ion-searchbar [(ngModel)]=\"query\" (ionInput)=\"searchPlace()\">&#x3C;/ion-searchbar>\n\n&#x3C;/ion-toolbar>\n\n&#x3C;ion-list>\n\n    &#x3C;ion-item *ngFor=\"let place of places\" (touchstart)=\"selectPlace(place)\">{{place.description}}&#x3C;/ion-item>\n\n&#x3C;/ion-list>\n</code></pre>\n</ion-header>\n<ion-content>\n<pre><code>&#x3C;div #pleaseConnect id=\"please-connect\">\n\n    &#x3C;p>Please connect to the Internet...&#x3C;/p>\n\n&#x3C;/div>\n\n&#x3C;div #map id=\"map\">\n\n    &#x3C;ion-spinner>&#x3C;/ion-spinner>\n\n&#x3C;/div>\n</code></pre>\n</ion-content>\n<p>In the <ion-content> section we have an element for where the map will be injected, and an element for the message that displays when no Internet connection is available. Details on how this works is available in the advanced Google Maps tutorial that I linked above.</p>\n<p>The content area is just a normal map, the interesting stuff in terms of this tutorial happens in the header. As well as having some buttons to dismiss the modal, we also have an additional toolbar in the header area. This contains a search bar that will define the query that is used with the Google Places API to predict some locations. We then also have a list that will display the results of those predictions (and give the user the ability to select one of those).</p>\n<p>A touchstart event binding is used for the places that will display in the list because if a click event is used it would require the user to tap twice to select a place (once to remove focus from the search bar, another to trigger a click on a particular place). The downside of this is that this will only work on devices, or through something like the Chrome DevTools mobile emulator (so that touch events are triggered rather than mouse events).</p>\n<p>In order to get everything in the template displaying correctly, we will also need to add a few styles.</p>\n<p>Modify src/pages/location-select/location-select.scss to reflect the following:</p>\n<p>page-location-select {</p>\n<p>  ion-list {</p>\n<pre><code>margin: 0 !important;\n</code></pre>\n<p>  }</p>\n<h1>please-connect {</h1>\n<pre><code>position: absolute;\n\nbackground-color: #000;\n\nopacity: 0.5;\n\nwidth: 100%;\n\nheight: 100%;\n\nz-index: 1;\n</code></pre>\n<p>  }</p>\n<h1>please-connect p {</h1>\n<pre><code>  color: #fff;\n\n  font-weight: bold;\n\n  text-align: center;\n\n  position: relative;\n\n  font-size: 1.6em;\n\n  top: 30%;\n</code></pre>\n<p>  }</p>\n<p>  .scroll-content {</p>\n<pre><code>  overflow: hidden;\n</code></pre>\n<p>  }</p>\n<h1>map {</h1>\n<pre><code>  width: 100%;\n\n  height: 100%;\n\n  display: flex;\n\n  justify-content: center;\n\n  align-items: center;\n</code></pre>\n<p>  }</p>\n<p>}</p>\n<p>Now let’s move on to the interesting stuff. We are going to implement the Google Places functionality in the TypeScript file for the LocationSelect page.</p>\n<p>Modify src/pages/location-select/location-select.ts to reflect the following:</p>\n<p>import { NavController, Platform, ViewController } from 'ionic-angular';</p>\n<p>import { Component, ElementRef, ViewChild, NgZone } from '@angular/core';</p>\n<p>import { Geolocation } from '@ionic-native/geolocation';</p>\n<p>import { GoogleMaps } from '../../providers/google-maps';</p>\n<p>@Component({</p>\n<p>  selector: 'page-location-select',</p>\n<p>  templateUrl: 'location-select.html'</p>\n<p>})</p>\n<p>export class LocationSelect {</p>\n<pre><code>@ViewChild('map') mapElement: ElementRef;\n\n@ViewChild('pleaseConnect') pleaseConnect: ElementRef;\n\nlatitude: number;\n\nlongitude: number;\n\nautocompleteService: any;\n\nplacesService: any;\n\nquery: string = '';\n\nplaces: any = [];\n\nsearchDisabled: boolean;\n\nsaveDisabled: boolean;\n\nlocation: any; \n\nconstructor(public navCtrl: NavController, public zone: NgZone, public maps: GoogleMaps, public platform: Platform, public geolocation: Geolocation, public viewCtrl: ViewController) {\n\n    this.searchDisabled = true;\n\n    this.saveDisabled = true;\n\n}\n\nionViewDidLoad(): void {\n\n    let mapLoaded = this.maps.init(this.mapElement.nativeElement, this.pleaseConnect.nativeElement).then(() => {\n\n        this.autocompleteService = new google.maps.places.AutocompleteService();\n\n        this.placesService = new google.maps.places.PlacesService(this.maps.map);\n\n        this.searchDisabled = false;\n\n    });\n\n}\n\nselectPlace(place){\n\n    this.places = [];\n\n    let location = {\n\n        lat: null,\n\n        lng: null,\n\n        name: place.name\n\n    };\n\n    this.placesService.getDetails({placeId: place.place_id}, (details) => {\n\n        this.zone.run(() => {\n\n            location.name = details.name;\n\n            location.lat = details.geometry.location.lat();\n\n            location.lng = details.geometry.location.lng();\n\n            this.saveDisabled = false;\n\n            this.maps.map.setCenter({lat: location.lat, lng: location.lng});\n\n            this.location = location;\n\n        });\n\n    });\n\n}\n\nsearchPlace(){\n\n    this.saveDisabled = true;\n\n    if(this.query.length > 0 &#x26;&#x26; !this.searchDisabled) {\n\n        let config = {\n\n            types: ['geocode'],\n\n            input: this.query\n\n        }\n\n        this.autocompleteService.getPlacePredictions(config, (predictions, status) => {\n\n            if(status == google.maps.places.PlacesServiceStatus.OK &#x26;&#x26; predictions){\n\n                this.places = [];\n\n                predictions.forEach((prediction) => {\n\n                    this.places.push(prediction);\n\n                });\n\n            }\n\n        });\n\n    } else {\n\n        this.places = [];\n\n    }\n\n}\n\nsave(){\n\n    this.viewCtrl.dismiss(this.location);\n\n}\n\nclose(){\n\n    this.viewCtrl.dismiss();\n\n}  \n</code></pre>\n<p>}</p>\n<p>There is a bit going on here, but if we step through it function by function it is all reasonably straightforward. In the ionViewDidLoad() function we initialise the Google Maps as usual (again, this is covered in the other Google Maps tutorial), but we also do something a little different. Once the map has initialised, we create new instances of an AutocompleteService and a PlacesService. Both of these come from the Google Maps Places API, and will allow us to get a list of predictions for a partial address and also grab details about a specific address (like the latitude and longitude).</p>\n<p>The searchPlace function is what handles getting the predictions and populating the <ion-list> in the header of the template. All we do is call the getPlacePredictions method on the AutocompleteService and that will return us a bunch of predictions. We then push each of those predictions into the places array, which is what is used to populate the <ion-list> in the template.</p>\n<p>The selectPlace function is triggered when the user taps on a prediction in the list. We then pass that prediction into the PlacesService to grab the details for that place. We set some of the information that is returned from that onto our location object, and we call the setCenter method on the map to change the position of the map to that location.</p>\n<p>The save function simply hands passing back whatever place was selected to the page that launched the modal.</p>\n<ol start=\"4\">\n<li>Launch the Location Select Page</li>\n</ol>\n<p>Our LocationSelect page is implemented now, and that was the hard part, so now we just have to launch it from somewhere.</p>\n<p>Modify src/pages/home/home.ts to reflect the following:</p>\n<p>import { Component } from '@angular/core';</p>\n<p>import { NavController, ModalController } from 'ionic-angular';</p>\n<p>import { LocationSelect } from '../location-select/location-select';</p>\n<p>@Component({</p>\n<p>  selector: 'page-home',</p>\n<p>  templateUrl: 'home.html'</p>\n<p>})</p>\n<p>export class HomePage {</p>\n<pre><code>constructor(public navCtrl: NavController, public modalCtrl: ModalController) {\n\n}\n\nlaunchLocationPage(){\n\n    let modal = this.modalCtrl.create(LocationSelect);\n\n    modal.onDidDismiss((location) => {\n\n        console.log(location);\n\n    });\n\n    modal.present();   \n\n}\n</code></pre>\n<p>}</p>\n<p>This is super simple, because all we need to do is create a new modal using the LocationSelect page and add an onDidDismiss handler. If the user selects a location, the information for that location will be passed back to this function, and then you can do whatever you want with it.</p>\n<p>Now, all we need to do is trigger that function.</p>\n<p>Modify src/pages/home/home.html to reflect the following:</p>\n<ion-header>\n  <ion-navbar>\n<pre><code>&#x3C;ion-title>\n\n  Ionic Blank\n\n&#x3C;/ion-title>\n</code></pre>\n  </ion-navbar>\n</ion-header>\n<ion-content padding>\n<pre><code>&#x3C;button ion-button (click)=\"launchLocationPage()\">Launch&#x3C;/button>\n</code></pre>\n</ion-content>\n<p>BONUS CONTENT\nGrab the source code (or other bonus content) for this article by entering your email address below:\nSummary</p>\n<p>The Google Places API manages to turn an awkward and complex problem into a reasonably manageable one. I like this solution in particular because it allows you to easily drop this LocationSelect page anywhere you like in your application, and receive data back in a nice and useable format.</p>\n<p>What to watch next...</p>",excerpt:"If you want to accept a user supplied location in your application, and you want it to be in any kind of remotely useful format, it could be…",timeToRead:13}},{node:{id:"/Users/davidwu/Desktop/Projects/mySite-gatsby/src/blog/anotherBlog.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Pandas and Bananas",date:"21 August, 2017"},html:"<p>Do Pandas eat bananas? Check out this short video that shows that yes! pandas do\nseem to really enjoy bananas!</p>",excerpt:"Do Pandas eat bananas? Check out this short video that shows that yes! pandas do\nseem to really enjoy bananas!",timeToRead:1}},{node:{id:"/Users/davidwu/Desktop/Projects/mySite-gatsby/src/blog/firstBlog.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Sweet Pandas Eating Sweets",date:"10 August, 2017"},html:"<p>Pandas are really sweet.</p>\n<p>Here's a video of a panda eating sweets.</p>",excerpt:"Pandas are really sweet. Here's a video of a panda eating sweets.",timeToRead:1}}]}},pathContext:{}}}});
//# sourceMappingURL=path---post-page-651526bfa862c58489f6.js.map